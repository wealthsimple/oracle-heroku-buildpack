#!/usr/bin/env ruby

require 'yaml'

$stdout.sync = true

def indent(msg)
  puts "       #{msg}"
end

BUILD_DIR = ARGV[0]
ENV_DIR   = ARGV[2]

# Colours for shell colouring
YELLOW  = '\033[1;33m'
RESET   ='\033[0m'

def warning message
  system "echo '#{YELLOW}WARNING: #{message}#{RESET}'"
end

puts "-----> Found an .oracle.yml"

ORACLE_CONFIG = YAML.load_file("#{BUILD_DIR}/.oracle.yml")

ORACLE_INSTANT_CLIENT_DIR="vendor/oracle_instantclient"
ORACLE_INSTANT_CLIENT_URL="https://download.oracle.com/otn_software/linux/instantclient/19600/instantclient-basic-linux.x64-19.6.0.0.0dbru.zip"
ORACLE_SQL_PLUS_URL="https://download.oracle.com/otn_software/linux/instantclient/195000/instantclient-sqlplus-linux.x64-19.5.0.0.0dbru.zip"
ORACLE_SDK_URL="https://download.oracle.com/otn_software/linux/instantclient/195000/instantclient-sdk-linux.x64-19.5.0.0.0dbru.zip"
ORACLE_INSTANT_CLIENT_FILENAME=ORACLE_INSTANT_CLIENT_URL.split(/\//).last
ORACLE_SQL_PLUS_FILENAME=ORACLE_SQL_PLUS_URL.split(/\//).last
ORACLE_SDK_FILENAME=ORACLE_SDK_URL.split(/\//).last

indent "Making directory #{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}"
`mkdir -p #{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}`

indent "Downloading and extracting #{ORACLE_INSTANT_CLIENT_FILENAME}"
result = `curl #{ORACLE_INSTANT_CLIENT_URL} -L -s -o - | unzip #{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR} - `

indent "Downloading and extracting #{ORACLE_SQL_PLUS_FILENAME}"
result = `curl #{ORACLE_SQL_PLUS_URL} -L -s -o - | unzip #{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR} - `

indent "Downloading and extracting #{ORACLE_SDK_FILENAME}"
result = `curl #{ORACLE_SDK_URL} -L -s -o - | unzip #{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR} - `

unless $?.success?
  indent "Failure while downloading Oracle instant client archive: #{$?}"
  exit 1
end

indent "Successfully extracted #{ORACLE_INSTANT_CLIENT_FILENAME}"
indent "Successfully extracted #{ORACLE_SQL_PLUS_FILENAME}"
indent "Successfully extracted #{ORACLE_SDK_FILENAME}"

ORACLE_NETWORK_ADMIN_DIR = "#{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}/network/admin"
`mkdir -p #{ORACLE_NETWORK_ADMIN_DIR}`

indent "Create profile.d script"
`mkdir -p #{BUILD_DIR}/.profile.d`

ORACLE_HOME = "/app/#{ORACLE_INSTANT_CLIENT_DIR}"

open("#{BUILD_DIR}/.profile.d/oracle.sh", "w") do |f|
  f.puts "export OCI_LIB_DIR=#{ORACLE_HOME}"
  f.puts "export ORACLE_HOME=#{ORACLE_HOME}"
  f.puts "export OCI_INC_DIR=#{ORACLE_HOME}/sdk/include"
  f.puts "export LD_LIBRARY_PATH=#{ORACLE_HOME}:$LD_LIBRARY_PATH"
  f.puts "export PATH=#{ORACLE_HOME}:$PATH"
  f.puts "export TNS_ADMIN=#{ORACLE_HOME}/network/admin"
end

`chmod +x /app/.profile.d/oracle.sh`
system "/app/.profile.d/oracle.sh"
indent "Save build LD_LIBRARY_PATH to ENV_DIR"

LD_LIBRARY_PATH_FILE = File.join(ENV_DIR, 'LD_LIBRARY_PATH')
existing_ld_library_path = `cat #{LD_LIBRARY_PATH_FILE}`  if File.exists?(LD_LIBRARY_PATH_FILE)

open(File.join(ENV_DIR,'LD_LIBRARY_PATH'), 'w') do |f|
  value = "#{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}"
  unless existing_ld_library_path.nil? || existing_ld_library_path.trim.empty?
    value += ":#{existing_ld_library_path}"
  end
  f.puts value
end

indent "Done!"
