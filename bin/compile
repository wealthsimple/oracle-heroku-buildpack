#!/usr/bin/env ruby

require 'yaml'

$stdout.sync = true

def indent(msg)
  puts "       #{msg}"
end

BUILD_DIR = ARGV[0]
ENV_DIR   = ARGV[2]

# Colours for shell colouring
YELLOW  = '\033[1;33m'
RESET   ='\033[0m'

def warning message
  system "echo '#{YELLOW}WARNING: #{message}#{RESET}'"
end

puts "-----> Found an .oracle.yml"

ORACLE_CONFIG = YAML.load_file("#{BUILD_DIR}/.oracle.yml")

ORACLE_INSTANT_CLIENT_DIR="vendor/oracle_instantclient"
ORACLE_INSTANT_CLIENT_URL="https://www.dropbox.com/s/lrohwo0sm8f16hu/oracle-instantclient-full-12.1-linux.x64.tar.gz"
ORACLE_INSTANT_CLIENT_FILENAME=ORACLE_INSTANT_CLIENT_URL.split(/\//).last

indent "Making directory #{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}"
`mkdir -p #{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}`

indent "Downloading and extracting #{ORACLE_INSTANT_CLIENT_FILENAME}"
result = `curl #{ORACLE_INSTANT_CLIENT_URL} -L -s -o - | tar -xvz -C #{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR} -f - `

unless $?.success?
  indent "Failure while downloading Oracle instant client archive: #{$?}"
  exit 1
end

indent "Successfully extracted #{ORACLE_INSTANT_CLIENT_FILENAME}"

ORACLE_NETWORK_ADMIN_DIR = "#{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}/network/admin"
`mkdir -p #{ORACLE_NETWORK_ADMIN_DIR}`

if ORACLE_CONFIG
  TNSNAMES_FILENAME = ORACLE_CONFIG['tnsnames.ora']
  if File.exists?(File.join(BUILD_DIR,TNSNAMES_FILENAME))
    indent "Symlinking #{TNSNAMES_FILENAME} to #{ORACLE_INSTANT_CLIENT_DIR}/network/admin/tnsnames.ora"
    `ln -sf #{File.join('/app',TNSNAMES_FILENAME)} #{ORACLE_NETWORK_ADMIN_DIR}/tnsnames.ora`
  end

  SQLNET_FILENAME = ORACLE_CONFIG['sqlnet.ora']
  if File.exists?(File.join(BUILD_DIR,SQLNET_FILENAME))
    indent "Symlinking #{SQLNET_FILENAME} to #{ORACLE_INSTANT_CLIENT_DIR}/network/admin/sqlnet.ora"
    `ln -sf #{File.join('/app',SQLNET_FILENAME)} #{ORACLE_NETWORK_ADMIN_DIR}/sqlnet.ora`
  end

  LDAP_FILENAME = ORACLE_CONFIG['ldap.ora']
  if File.exists?(File.join(BUILD_DIR,LDAP_FILENAME))
    indent "Symlinking #{LDAP_FILENAME} to #{ORACLE_INSTANT_CLIENT_DIR}/network/admin/ldap.ora"
    `ln -sf #{File.join('/app',LDAP_FILENAME)} #{ORACLE_NETWORK_ADMIN_DIR}/ldap.ora`
  end
else
  warning '.oracle.yml is empty or invalid'
end

indent "Create profile.d script"
`mkdir -p #{BUILD_DIR}/.profile.d`

ORACLE_HOME = "/app/#{ORACLE_INSTANT_CLIENT_DIR}"

open("#{BUILD_DIR}/.profile.d/oracle.sh", "w") do |f|
  f.puts "export OCI_LIB_DIR=#{ORACLE_HOME}"
  f.puts "export ORACLE_HOME=#{ORACLE_HOME}"
  f.puts "export OCI_INC_DIR=#{ORACLE_HOME}/sdk/include"
  f.puts "export LD_LIBRARY_PATH=#{ORACLE_HOME}:$LD_LIBRARY_PATH"
  f.puts "export PATH=#{ORACLE_HOME}:$PATH"
  f.puts "export TNS_ADMIN=#{ORACLE_HOME}/network/admin"
end

`chmod +x #{BUILD_DIR}/.profile.d/oracle.sh`
system "#{BUILD_DIR}/.profile.d/oracle.sh"
indent "Save build LD_LIBRARY_PATH to ENV_DIR"

LD_LIBRARY_PATH_FILE = File.join(ENV_DIR, 'LD_LIBRARY_PATH')
existing_ld_library_path = `cat #{LD_LIBRARY_PATH_FILE}`  if File.exists?(LD_LIBRARY_PATH_FILE)

open(File.join(ENV_DIR,'LD_LIBRARY_PATH'), 'w') do |f|
  value = "#{BUILD_DIR}/#{ORACLE_INSTANT_CLIENT_DIR}"
 # unless existing_ld_library_path.nil? || existing_ld_library_path.trim.empty?
 #   value += ":#{existing_ld_library_path}"
 # end
  f.puts value
end

indent "Done!"
